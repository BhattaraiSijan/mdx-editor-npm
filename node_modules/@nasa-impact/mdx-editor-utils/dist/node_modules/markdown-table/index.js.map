{"version":3,"file":"index.js","sources":["../../../../../node_modules/markdown-table/index.js"],"sourcesContent":["// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn‚Äôt place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > üëâ **Note**: please don‚Äôt use this: it could create fragile structures\n *   > that aren‚Äôt understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > üëâ **Note**: please don‚Äôt use this: it could create fragile structures\n *   > that aren‚Äôt understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its ‚Äúvisible‚Äù size;\n *   note that what is and isn‚Äôt visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['‰∏≠Êñá', 'Charlie'],\n *     ['üë©‚Äç‚ù§Ô∏è‚Äçüë©', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | ‰∏≠Êñá | Charlie |\n *   | üë©‚Äç‚ù§Ô∏è‚Äçüë© | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['‰∏≠Êñá', 'Charlie'],\n *       ['üë©‚Äç‚ù§Ô∏è‚Äçüë©', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | ‰∏≠Êñá  | Charlie |\n *   | üë©‚Äç‚ù§Ô∏è‚Äçüë©    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don‚Äôt align delimiters, but otherwise we‚Äôd\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (settings.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don‚Äôt add the opening space if we‚Äôre not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n      ? 108 /* `l` */\n      : code === 82 /* `R` */ || code === 114 /* `r` */\n        ? 114 /* `r` */\n        : 0\n}\n"],"names":["defaultStringLength","value","markdownTable","table","options","settings","align","stringLength","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","sizes","columnIndex","cell","serialize","size","toAlignment","code","before","after","lines","line"],"mappings":"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","x_google_ignoreList":[0]}