import { j as e } from "./packages/mdx-editor-utils/node_modules/react/jsx-runtime.js";
import { useState as D, useRef as E, useEffect as I } from "react";
import { Label as m, Select as y, TextInput as T, Textarea as k, Checkbox as H, DatePicker as R } from "./node_modules/@trussworks/react-uswds/lib/index.js";
import { handleMapArrayValidation as P } from "./inputValidation.js";
const p = (l, r) => l && !r ? { validationStatus: "error" } : "", A = [
  "Blues",
  "Greens",
  "Greys",
  "Oranges",
  "Purples",
  "Reds",
  "Turbo",
  "Viridis",
  "Inferno",
  "Magma",
  "Plasma",
  "Cividis",
  "Warm",
  "Cool",
  "CubehelixDefault"
], V = (l) => {
  const {
    value: r,
    isRequired: o,
    type: j,
    fieldName: s,
    hint: d,
    onChange: c,
    componentProps: u,
    propName: a,
    placeHolder: F,
    validateAgainst: h,
    draftInputs: i,
    setDraftInputs: g,
    inputErrors: N,
    setInputErrors: G,
    options: x
  } = l;
  if (x && Array.isArray(x))
    return /* @__PURE__ */ e.jsxs(e.Fragment, { children: [
      /* @__PURE__ */ e.jsx(m, { htmlFor: a, className: "margin-top-2", children: s }),
      /* @__PURE__ */ e.jsx("span", { className: "usa-hint", children: d }),
      /* @__PURE__ */ e.jsxs(
        y,
        {
          id: a,
          name: a,
          value: r,
          onChange: (t) => c({ ...u, [a]: t.target.value }),
          ...p(o, r),
          children: [
            /* @__PURE__ */ e.jsx("option", { value: "", children: "- Select option -" }),
            x.map((t) => {
              const v = typeof t == "object" ? t.value : t, S = typeof t == "object" ? t.label : t;
              return /* @__PURE__ */ e.jsx("option", { value: v, children: S }, v);
            })
          ]
        }
      )
    ] });
  const C = j !== void 0 && j.toLowerCase(), [n, b] = D(r), f = E(null);
  switch (I(() => (a === "dateFormat" && n != i.draftDateFormat && g({ ...i, draftDateFormat: n }), a === "highlightStart" && n != i.draftHighlightStart && g({ ...i, draftHighlightStart: n }), a === "highlightEnd" && n != i.draftHighlightEnd && g({ ...i, draftHighlightEnd: n }), clearTimeout(f.current), f.current = setTimeout(() => {
    h && (a === "dateFormat" || a === "highlightStart" || a === "highlightEnd" || h === "defaultDateFormat" || (h === "centerFormat" ? P(
      a
    ) : c({ ...u, [a]: n })));
  }, 400), () => clearTimeout(f.current)), [n, i]), C) {
    case "date":
      return (
        //CHORE: Need to clean up or delete
        /* @__PURE__ */ e.jsxs(e.Fragment, { children: [
          /* @__PURE__ */ e.jsx(m, { htmlFor: "input-type-text", className: "margin-top-2", children: s }),
          /* @__PURE__ */ e.jsx("span", { className: "usa-hint", children: d }),
          /* @__PURE__ */ e.jsx(
            R,
            {
              defaultValue: r,
              onChange: (t) => console.log("DatePicker", t),
              ...p(o, r)
            }
          )
        ] })
      );
    case "checkbox":
      return /* @__PURE__ */ e.jsx(
        H,
        {
          id: s,
          name: "checkbox",
          label: s,
          onChange: (t) => c({ ...u, [a]: t.target.value })
        }
      );
    case "select":
      return /* @__PURE__ */ e.jsxs(e.Fragment, { children: [
        /* @__PURE__ */ e.jsx(m, { htmlFor: "input-type-text", className: "margin-top-2", children: s }),
        /* @__PURE__ */ e.jsx("span", { className: "usa-hint", children: d }),
        /* @__PURE__ */ e.jsx(
          y,
          {
            id: s,
            name: s,
            onChange: (t) => c({ ...u, [a]: t.target.value }),
            children: A.map((t) => /* @__PURE__ */ e.jsx("option", { value: t, children: t }, t))
          }
        )
      ] });
    case "area":
      return /* @__PURE__ */ e.jsxs(e.Fragment, { children: [
        /* @__PURE__ */ e.jsx(m, { htmlFor: "input-type-text", className: "margin-top-2", children: s }),
        /* @__PURE__ */ e.jsx("span", { className: "usa-hint", children: d }),
        /* @__PURE__ */ e.jsx(
          k,
          {
            id: "input-type-text",
            name: "input-type-text",
            value: r,
            onChange: (t) => {
              c({ ...u, [a]: t.target.value });
            },
            className: "",
            ...p(o, r)
          }
        )
      ] });
    default:
      return /* @__PURE__ */ e.jsxs(e.Fragment, { children: [
        /* @__PURE__ */ e.jsx(m, { htmlFor: "input-type-text", className: "margin-top-2", children: s }),
        /* @__PURE__ */ e.jsx("span", { className: "usa-hint", children: d }),
        /* @__PURE__ */ e.jsx(
          T,
          {
            id: "input-type-text",
            name: "input-type-text",
            type: "text",
            value: h ? n : r,
            onChange: (t) => {
              h ? b(t.target.value) : c({ ...u, [a]: t.target.value });
            },
            placeholder: F,
            ...p(o, r),
            validationStatus: h && (N[a] ? "error" : void 0)
          }
        )
      ] });
  }
}, O = (l) => {
  const { propName: r, customClass: o } = l;
  return /* @__PURE__ */ e.jsx("div", { className: o, children: V(l) }, r);
};
export {
  O as InputField
};
//# sourceMappingURL=CreateInterface.js.map
