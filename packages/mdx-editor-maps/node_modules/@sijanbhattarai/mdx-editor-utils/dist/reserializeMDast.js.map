{"version":3,"file":"reserializeMDast.js","sources":["../src/reserializeMDast.tsx"],"sourcesContent":["import { toMarkdown } from 'mdast-util-to-markdown';\nimport { mdxToMarkdown } from 'mdast-util-mdx';\nimport { gfmToMarkdown } from 'mdast-util-gfm';\nimport { mdxJsxToMarkdown } from 'mdast-util-mdx-jsx';\nimport { extractImports } from './extractImports';\n\nimport { groupByBreakIntoBlocks } from './groupElements';\n\nconst blockItem = {\n  type: 'mdxJsxFlowElement',\n  name: 'Block',\n  children: [],\n};\n\nconst proseItem = {\n  type: 'mdxJsxFlowElement',\n  name: 'Prose',\n  children: [],\n};\n\n//TO DO: Create seperate block prose containers\n\nconst transformMdast = (node) => {\n  // if (!node || typeof node !== 'object') return node;\n  if (!node || node.type !== 'root' || !Array.isArray(node.children)) {\n    return node;\n  }\n  // if (node.type === 'root') {\n  //   const newChildren: any = [];\n  const newChildren: any[] = [];\n  for (const child of node.children) {\n    // Unwrap paragraphs that only contain a single JSX flow element.\n    // This is a common pattern to avoid unwanted <p> tags around components.\n    if (\n      child.type === 'paragraph' &&\n      child.children.length === 1 &&\n      child.children[0].type === 'mdxJsxFlowElement'\n    ) {\n      newChildren.push(child.children[0]);\n    } else {\n      newChildren.push(child);\n    }\n  }\n\n  //   for (const child of node.children) {\n  //     if (child.type === 'paragraph') {\n  //       // Elevate each text/html child to the root\n  //       for (const sub of child.children) {\n  //         switch (sub.type) {\n  //           case 'text':\n  //             newChildren.push({\n  //               type: 'paragraph',\n  //               children: [sub],\n  //             });\n  //             break;\n  //           case 'html':\n  //             newChildren.push(sub);\n  //             break;\n  //           case 'mdxJsxTextElement':\n  //             newChildren.push(sub);\n  //             break;\n  //           case 'mdxJsxFlowElement':\n  //             newChildren.push(sub);\n  //             break;\n  //           default:\n  //             newChildren.push(sub);\n  //             break;\n  //         }\n  //       }\n  //     } else {\n  //       // Recurse into child\n  //       const transformed = transformMdast(child);\n  //       newChildren.push(transformed);\n  //     }\n  //   }\n\n  //   return { ...node, children: newChildren };\n  // }\n\n  // // Handle recursion for non-root nodes with children\n  // if (Array.isArray(node.children)) {\n  //   return {\n  //     ...node,\n  //     children: node.children.map(transformMdast),\n  //   };\n  // }\n\n  // return node;\n  return { ...node, children: newChildren };\n};\n\nexport const reserializedMdxContent = (MDAST) => {\n\n  const seperatedMDAST = transformMdast(MDAST);\n\n  const groupedMDSAT = groupByBreakIntoBlocks(seperatedMDAST);\n  extractImports(seperatedMDAST);\n\n  const newMDast = { ...seperatedMDAST, children: groupedMDSAT };\n  const mdastToMdx = (mdast) => {\n    return toMarkdown(mdast, {\n      extensions: [mdxToMarkdown(), gfmToMarkdown(), mdxJsxToMarkdown()],\n    });\n  };\n\n  return mdastToMdx(newMDast);\n};\n"],"names":["transformMdast","node","newChildren","child","reserializedMdxContent","MDAST","seperatedMDAST","groupedMDSAT","groupByBreakIntoBlocks","extractImports","newMDast","mdast","toMarkdown","mdxToMarkdown","gfmToMarkdown","mdxJsxToMarkdown"],"mappings":";;;;;;AAsBA,MAAMA,IAAiB,CAACC,MAAS;AAE/B,MAAI,CAACA,KAAQA,EAAK,SAAS,UAAU,CAAC,MAAM,QAAQA,EAAK,QAAQ;AAC/D,WAAOA;AAIT,QAAMC,IAAqB,CAAA;AAC3B,aAAWC,KAASF,EAAK;AAGvB,IACEE,EAAM,SAAS,eACfA,EAAM,SAAS,WAAW,KAC1BA,EAAM,SAAS,CAAC,EAAE,SAAS,sBAE3BD,EAAY,KAAKC,EAAM,SAAS,CAAC,CAAC,IAElCD,EAAY,KAAKC,CAAK;AAgD1B,SAAO,EAAE,GAAGF,GAAM,UAAUC,EAAA;AAC9B,GAEaE,IAAyB,CAACC,MAAU;AAE/C,QAAMC,IAAiBN,EAAeK,CAAK,GAErCE,IAAeC,EAAuBF,CAAc;AAC1D,EAAAG,EAAeH,CAAc;AAE7B,QAAMI,IAAW,EAAE,GAAGJ,GAAgB,UAAUC,EAAA;AAOhD,UANmB,CAACI,MACXC,EAAWD,GAAO;AAAA,IACvB,YAAY,CAACE,EAAA,GAAiBC,EAAA,GAAiBC,GAAkB;AAAA,EAAA,CAClE,GAGeL,CAAQ;AAC5B;"}