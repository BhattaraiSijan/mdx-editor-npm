import { zwitch as c } from "../../zwitch/index.js";
import { configure as s } from "./configure.js";
import { handle as u } from "./handle/index.js";
import { join as d } from "./join.js";
import { unsafe as h } from "./unsafe.js";
import { association as m } from "./util/association.js";
import { compilePattern as p } from "./util/compile-pattern.js";
import { containerPhrasing as l } from "./util/container-phrasing.js";
import { containerFlow as w } from "./util/container-flow.js";
import { indentLines as k } from "./util/indent-lines.js";
import { safe as g } from "./util/safe.js";
import { track as y } from "./util/track.js";
function G(n, o) {
  const i = o || {}, t = {
    associationId: m,
    containerPhrasing: P,
    containerFlow: B,
    createTracker: y,
    compilePattern: p,
    enter: r,
    // @ts-expect-error: GFM / frontmatter are typed in `mdast` but not defined
    // here.
    handlers: { ...u },
    // @ts-expect-error: add `handle` in a second.
    handle: void 0,
    indentLines: k,
    indexStack: [],
    join: [...d],
    options: {},
    safe: F,
    stack: [],
    unsafe: [...h]
  };
  s(t, i), t.options.tightDefinitions && t.join.push(C), t.handle = c("type", {
    invalid: j,
    unknown: x,
    handlers: t.handlers
  });
  let e = t.handle(n, void 0, t, {
    before: `
`,
    after: `
`,
    now: { line: 1, column: 1 },
    lineShift: 0
  });
  return e && e.charCodeAt(e.length - 1) !== 10 && e.charCodeAt(e.length - 1) !== 13 && (e += `
`), e;
  function r(a) {
    return t.stack.push(a), f;
    function f() {
      t.stack.pop();
    }
  }
}
function j(n) {
  throw new Error("Cannot handle value `" + n + "`, expected node");
}
function x(n) {
  const o = (
    /** @type {Nodes} */
    n
  );
  throw new Error("Cannot handle unknown node `" + o.type + "`");
}
function C(n, o) {
  if (n.type === "definition" && n.type === o.type)
    return 0;
}
function P(n, o) {
  return l(n, this, o);
}
function B(n, o) {
  return w(n, this, o);
}
function F(n, o) {
  return g(this, n, o);
}
export {
  G as toMarkdown
};
//# sourceMappingURL=index.js.map
