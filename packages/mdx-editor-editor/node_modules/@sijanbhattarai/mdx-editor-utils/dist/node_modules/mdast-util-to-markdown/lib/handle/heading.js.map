{"version":3,"file":"heading.js","sources":["../../../../../../../node_modules/mdast-util-to-markdown/lib/handle/heading.js"],"sourcesContent":["/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Heading, Parents} from 'mdast'\n */\n\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n"],"names":["heading","node","_","state","info","rank","tracker","formatHeadingAsSetext","exit","subexit","value","sequence","encodeCharacterReference"],"mappings":";;AAeO,SAASA,EAAQC,GAAMC,GAAGC,GAAOC,GAAM;AAC5C,QAAMC,IAAO,KAAK,IAAI,KAAK,IAAI,GAAGJ,EAAK,SAAS,CAAC,GAAG,CAAC,GAC/CK,IAAUH,EAAM,cAAcC,CAAI;AAExC,MAAIG,EAAsBN,GAAME,CAAK,GAAG;AACtC,UAAMK,IAAOL,EAAM,MAAM,eAAe,GAClCM,IAAUN,EAAM,MAAM,UAAU,GAChCO,IAAQP,EAAM,kBAAkBF,GAAM;AAAA,MAC1C,GAAGK,EAAQ,QAAO;AAAA,MAClB,QAAQ;AAAA;AAAA,MACR,OAAO;AAAA;AAAA,IACb,CAAK;AACD,WAAAG,EAAO,GACPD,EAAI,GAGFE,IACA;AAAA,KACCL,MAAS,IAAI,MAAM,KAAK;AAAA;AAAA,MAEvBK,EAAM;AAAA;AAAA,OAGH,KAAK,IAAIA,EAAM,YAAY,IAAI,GAAGA,EAAM,YAAY;AAAA,CAAI,CAAC,IAAI;AAAA,IACxE;AAAA,EAEE;AAEA,QAAMC,IAAW,IAAI,OAAON,CAAI,GAC1BG,IAAOL,EAAM,MAAM,YAAY,GAC/BM,IAAUN,EAAM,MAAM,UAAU;AAMtC,EAAAG,EAAQ,KAAKK,IAAW,GAAG;AAE3B,MAAID,IAAQP,EAAM,kBAAkBF,GAAM;AAAA,IACxC,QAAQ;AAAA,IACR,OAAO;AAAA;AAAA,IACP,GAAGK,EAAQ,QAAO;AAAA,EACtB,CAAG;AAED,SAAI,SAAS,KAAKI,CAAK,MAErBA,IAAQE,EAAyBF,EAAM,WAAW,CAAC,CAAC,IAAIA,EAAM,MAAM,CAAC,IAGvEA,IAAQA,IAAQC,IAAW,MAAMD,IAAQC,GAErCR,EAAM,QAAQ,aAChBO,KAAS,MAAMC,IAGjBF,EAAO,GACPD,EAAI,GAEGE;AACT;","x_google_ignoreList":[0]}