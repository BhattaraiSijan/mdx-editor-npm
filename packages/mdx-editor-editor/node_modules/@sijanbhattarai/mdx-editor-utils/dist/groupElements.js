import { handleTwoColumn as u } from "./parseTwoColumn.js";
import { wrapComponent as a } from "./wrapComponent.js";
const i = (t) => {
  const l = [], s = (r) => ({
    type: "mdxJsxFlowElement",
    name: "Prose",
    children: [...r]
  }), m = (r) => {
    const n = [];
    let o = [];
    for (const e of r)
      if (e.type === "mdxJsxTextElement" || e.type === "mdxJsxFlowElement") {
        if (e.name === "Break")
          o.length > 0 && (n.push([s(o)]), o = []);
        else if (e.name === "Block" || e.name === "Chart" || e.name === "Map" || e.name === "TwoColumn") {
          if (n.push([s(o)]), e.name === "Chart" || e.name === "Map")
            n.push([a(e)]);
          else if (e.name === "TwoColumn") {
            const p = u(e);
            n.push(p);
          }
          o = [];
        }
      } else
        o.push(e);
    return o.length > 0 && n.push([...o]), n;
  };
  if (t.type === "root" && Array.isArray(t.children)) {
    const r = m(t.children);
    for (const n of r)
      n.some((o) => o.name === "Prose") ? l.push({
        type: "mdxJsxFlowElement",
        name: "Block",
        children: [...n]
      }) : l.push({
        type: "mdxJsxFlowElement",
        name: "Block",
        children: [
          {
            type: "mdxJsxFlowElement",
            name: "Prose",
            children: [...n]
          }
        ]
      });
  }
  return l;
};
export {
  i as groupByBreakIntoBlocks
};
//# sourceMappingURL=groupElements.js.map
