import { mdxJsxToMarkdown as s } from "mdast-util-mdx-jsx";
import { extractImports as i } from "./extractImports.js";
import { groupByBreakIntoBlocks as m } from "./groupElements.js";
import { toMarkdown as d } from "./packages/mdx-editor-utils/node_modules/mdast-util-to-markdown/lib/index.js";
import { mdxToMarkdown as a } from "./packages/mdx-editor-utils/node_modules/mdast-util-mdx/lib/index.js";
import { gfmToMarkdown as c } from "./node_modules/mdast-util-gfm/lib/index.js";
const p = (r) => {
  if (!r || r.type !== "root" || !Array.isArray(r.children))
    return r;
  const o = [];
  for (const t of r.children)
    t.type === "paragraph" && t.children.length === 1 && t.children[0].type === "mdxJsxFlowElement" ? o.push(t.children[0]) : o.push(t);
  return { ...r, children: o };
}, T = (r) => {
  const o = p(r), t = m(o);
  i(o);
  const e = { ...o, children: t };
  return ((n) => d(n, {
    extensions: [a(), c(), s()]
  }))(e);
};
export {
  T as reserializedMdxContent
};
//# sourceMappingURL=reserializeMDast.js.map
