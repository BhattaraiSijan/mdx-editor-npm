{"version":3,"file":"index.js","sources":["../../../../../../node_modules/mdast-util-gfm-footnote/lib/index.js"],"sourcesContent":["/**\n * @import {\n *   CompileContext,\n *   Extension as FromMarkdownExtension,\n *   Handle as FromMarkdownHandle\n * } from 'mdast-util-from-markdown'\n * @import {ToMarkdownOptions} from 'mdast-util-gfm-footnote'\n * @import {\n *   Handle as ToMarkdownHandle,\n *   Map,\n *   Options as ToMarkdownExtension\n * } from 'mdast-util-to-markdown'\n * @import {FootnoteDefinition, FootnoteReference} from 'mdast'\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {after: ']', before: value})\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteCallString: enterFootnoteCallString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: enterFootnoteDefinition\n    },\n    exit: {\n      gfmFootnoteCallString: exitFootnoteCallString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: exitFootnoteDefinition\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown(options) {\n  // To do: next major: change default.\n  let firstLineBlank = false\n\n  if (options && options.firstLineBlank) {\n    firstLineBlank = true\n  }\n\n  return {\n    handlers: {footnoteDefinition, footnoteReference},\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['label', 'phrasing', 'reference']}]\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteDefinition} node\n   */\n  function footnoteDefinition(node, _, state, info) {\n    const tracker = state.createTracker(info)\n    let value = tracker.move('[^')\n    const exit = state.enter('footnoteDefinition')\n    const subexit = state.enter('label')\n    value += tracker.move(\n      state.safe(state.associationId(node), {before: value, after: ']'})\n    )\n    subexit()\n\n    value += tracker.move(']:')\n\n    if (node.children && node.children.length > 0) {\n      tracker.shift(4)\n\n      value += tracker.move(\n        (firstLineBlank ? '\\n' : ' ') +\n          state.indentLines(\n            state.containerFlow(node, tracker.current()),\n            firstLineBlank ? mapAll : mapExceptFirst\n          )\n      )\n    }\n\n    exit()\n\n    return value\n  }\n}\n\n/** @type {Map} */\nfunction mapExceptFirst(line, index, blank) {\n  return index === 0 ? line : mapAll(line, index, blank)\n}\n\n/** @type {Map} */\nfunction mapAll(line, index, blank) {\n  return (blank ? '' : '    ') + line\n}\n"],"names":["footnoteReference","footnoteReferencePeek","node","_","state","info","tracker","value","exit","subexit","gfmFootnoteToMarkdown","options","footnoteDefinition","mapExceptFirst","line","index","blank","mapAll"],"mappings":"AAkBAA,EAAkB,OAAOC;AAkFzB,SAASA,IAAwB;AAC/B,SAAO;AACT;AAMA,SAASD,EAAkBE,GAAMC,GAAGC,GAAOC,GAAM;AAC/C,QAAMC,IAAUF,EAAM,cAAcC,CAAI;AACxC,MAAIE,IAAQD,EAAQ,KAAK,IAAI;AAC7B,QAAME,IAAOJ,EAAM,MAAM,mBAAmB,GACtCK,IAAUL,EAAM,MAAM,WAAW;AACvC,SAAAG,KAASD,EAAQ;AAAA,IACfF,EAAM,KAAKA,EAAM,cAAcF,CAAI,GAAG,EAAC,OAAO,KAAK,QAAQK,EAAK,CAAC;AAAA,EACrE,GACEE,EAAO,GACPD,EAAI,GACJD,KAASD,EAAQ,KAAK,GAAG,GAClBC;AACT;AAmCO,SAASG,EAAsBC,GAAS;AAQ7C,SAAO;AAAA,IACL,UAAU,EAAC,oBAAAC,GAAoB,mBAAAZ,EAAiB;AAAA;AAAA,IAEhD,QAAQ,CAAC,EAAC,WAAW,KAAK,aAAa,CAAC,SAAS,YAAY,WAAW,EAAC,CAAC;AAAA,EAC9E;AAME,WAASY,EAAmBV,GAAMC,GAAGC,GAAOC,GAAM;AAChD,UAAMC,IAAUF,EAAM,cAAcC,CAAI;AACxC,QAAIE,IAAQD,EAAQ,KAAK,IAAI;AAC7B,UAAME,IAAOJ,EAAM,MAAM,oBAAoB,GACvCK,IAAUL,EAAM,MAAM,OAAO;AACnC,WAAAG,KAASD,EAAQ;AAAA,MACfF,EAAM,KAAKA,EAAM,cAAcF,CAAI,GAAG,EAAC,QAAQK,GAAO,OAAO,IAAG,CAAC;AAAA,IACvE,GACIE,EAAO,GAEPF,KAASD,EAAQ,KAAK,IAAI,GAEtBJ,EAAK,YAAYA,EAAK,SAAS,SAAS,MAC1CI,EAAQ,MAAM,CAAC,GAEfC,KAASD,EAAQ;AAAA,MACU,MACvBF,EAAM;AAAA,QACJA,EAAM,cAAcF,GAAMI,EAAQ,QAAO,CAAE;AAAA,QACjBO;AAAA,MACtC;AAAA,IACA,IAGIL,EAAI,GAEGD;AAAA,EACT;AACF;AAGA,SAASM,EAAeC,GAAMC,GAAOC,GAAO;AAC1C,SAAOD,MAAU,IAAID,IAAOG,EAAOH,GAAMC,GAAOC,CAAK;AACvD;AAGA,SAASC,EAAOH,GAAMC,GAAOC,GAAO;AAClC,UAAQA,IAAQ,KAAK,UAAUF;AACjC;","x_google_ignoreList":[0]}