u.peek = s;
function s() {
  return "[";
}
function u(r, c, e, f) {
  const n = e.createTracker(f);
  let i = n.move("[^");
  const o = e.enter("footnoteReference"), t = e.enter("reference");
  return i += n.move(
    e.safe(e.associationId(r), { after: "]", before: i })
  ), t(), o(), i += n.move("]"), i;
}
function h(r) {
  return {
    handlers: { footnoteDefinition: c, footnoteReference: u },
    // This is on by default already.
    unsafe: [{ character: "[", inConstruct: ["label", "phrasing", "reference"] }]
  };
  function c(e, f, n, i) {
    const o = n.createTracker(i);
    let t = o.move("[^");
    const a = n.enter("footnoteDefinition"), l = n.enter("label");
    return t += o.move(
      n.safe(n.associationId(e), { before: t, after: "]" })
    ), l(), t += o.move("]:"), e.children && e.children.length > 0 && (o.shift(4), t += o.move(
      " " + n.indentLines(
        n.containerFlow(e, o.current()),
        m
      )
    )), a(), t;
  }
}
function m(r, c, e) {
  return c === 0 ? r : v(r, c, e);
}
function v(r, c, e) {
  return (e ? "" : "    ") + r;
}
export {
  h as gfmFootnoteToMarkdown
};
//# sourceMappingURL=index.js.map
