{"version":3,"file":"code.js","sources":["../../../../../../../node_modules/mdast-util-to-markdown/lib/handle/code.js"],"sourcesContent":["/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {Code, Parents} from 'mdast'\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n"],"names":["code","node","_","state","info","marker","checkFence","raw","suffix","formatCodeAsIndented","exit","value","map","tracker","sequence","longestStreak","subexit","line","blank"],"mappings":";;;AAgBO,SAASA,EAAKC,GAAMC,GAAGC,GAAOC,GAAM;AACzC,QAAMC,IAASC,EAAWH,CAAK,GACzBI,IAAMN,EAAK,SAAS,IACpBO,IAASH,MAAW,MAAM,gBAAgB;AAEhD,MAAII,EAAqBR,GAAME,CAAK,GAAG;AACrC,UAAMO,IAAOP,EAAM,MAAM,cAAc,GACjCQ,IAAQR,EAAM,YAAYI,GAAKK,CAAG;AACxC,WAAAF,EAAI,GACGC;AAAA,EACT;AAEA,QAAME,IAAUV,EAAM,cAAcC,CAAI,GAClCU,IAAWT,EAAO,OAAO,KAAK,IAAIU,EAAcR,GAAKF,CAAM,IAAI,GAAG,CAAC,CAAC,GACpEK,IAAOP,EAAM,MAAM,YAAY;AACrC,MAAIQ,IAAQE,EAAQ,KAAKC,CAAQ;AAEjC,MAAIb,EAAK,MAAM;AACb,UAAMe,IAAUb,EAAM,MAAM,iBAAiBK,CAAM,EAAE;AACrD,IAAAG,KAASE,EAAQ;AAAA,MACfV,EAAM,KAAKF,EAAK,MAAM;AAAA,QACpB,QAAQU;AAAA,QACR,OAAO;AAAA,QACP,QAAQ,CAAC,GAAG;AAAA,QACZ,GAAGE,EAAQ,QAAO;AAAA,MAC1B,CAAO;AAAA,IACP,GACIG,EAAO;AAAA,EACT;AAEA,MAAIf,EAAK,QAAQA,EAAK,MAAM;AAC1B,UAAMe,IAAUb,EAAM,MAAM,iBAAiBK,CAAM,EAAE;AACrD,IAAAG,KAASE,EAAQ,KAAK,GAAG,GACzBF,KAASE,EAAQ;AAAA,MACfV,EAAM,KAAKF,EAAK,MAAM;AAAA,QACpB,QAAQU;AAAA,QACR,OAAO;AAAA;AAAA,QACP,QAAQ,CAAC,GAAG;AAAA,QACZ,GAAGE,EAAQ,QAAO;AAAA,MAC1B,CAAO;AAAA,IACP,GACIG,EAAO;AAAA,EACT;AAEA,SAAAL,KAASE,EAAQ,KAAK;AAAA,CAAI,GAEtBN,MACFI,KAASE,EAAQ,KAAKN,IAAM;AAAA,CAAI,IAGlCI,KAASE,EAAQ,KAAKC,CAAQ,GAC9BJ,EAAI,GACGC;AACT;AAGA,SAASC,EAAIK,GAAMf,GAAGgB,GAAO;AAC3B,UAAQA,IAAQ,KAAK,UAAUD;AACjC;","x_google_ignoreList":[0]}